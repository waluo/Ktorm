
buildscript {
    ext {
        kotlinVersion = "1.3.40"
        detektVersion = "1.0.0-RC14"
    }
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${detektVersion}"
    }
}

allprojects {
    group = "me.liuwj.ktorm"
    version = "2.5"
}

subprojects { project ->
    apply plugin: "kotlin"
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.bintray"
    apply plugin: "io.gitlab.arturbosch.detekt"
    apply from: "${project.rootDir}/check-source-header.gradle"

    repositories {
        jcenter()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
        compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
        testCompile "junit:junit:4.12"
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:${detektVersion}"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions.jvmTarget = "1.8"
        kotlinOptions.allWarningsAsErrors = true
    }

    task generateSourcesJar(type: Jar) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task generateJavadoc(type: Jar) {
        classifier = "javadoc"
    }

    detekt {
        toolVersion = detektVersion
        config = files("${project.rootDir}/detekt.yml")
        reports {
            xml.enabled = false
            html.enabled = false
        }
    }

    publishing {
        publications {
            bintray(MavenPublication) {
                from components.java
                artifact generateSourcesJar
                artifact generateJavadoc

                groupId project.group
                artifactId project.name
                version project.version

                pom {
                    name = project.name
                    description = "A lightweight ORM Framework for Kotlin with strong typed SQL DSL and sequence APIs."
                    url = "https://github.com/vincentlauvlwj/Ktorm"
                    licenses {
                        license {
                            name = "The Apache Software License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = "vincentlauvlwj"
                            name = "vince"
                            email = "me@liuwj.me"
                        }
                    }
                    scm {
                        url = "https://github.com/vincentlauvlwj/Ktorm.git"
                    }
                }
            }
        }
    }

    bintray {
        user = System.getenv("BINTRAY_USER")
        key = System.getenv("BINTRAY_KEY")
        publications = ["bintray"]
        publish = false

        pkg {
            repo = "maven"
            name = project.name
            licenses = ["Apache-2.0"]
            vcsUrl = "https://github.com/vincentlauvlwj/Ktorm.git"
            labels = ["Kotlin", "ORM", "SQL"]

            version {
                name = project.version
                released = new Date()
                vcsTag = project.version

                mavenCentralSync {
                    sync = false
                    user = System.getenv("OSSRH_USER")
                    password = System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }
}

task printClasspath() {
    doLast {
        def jars = subprojects.collect { it.configurations.compileClasspath.getFiles() }.flatten().toSet()
        jars.removeIf { it.name.contains("ktorm") }

        println("Project classpath: ")
        jars.each { println(it.name) }

        def file = file("build/ktorm.classpath")
        file.parentFile.mkdirs()
        file.write(jars.collect { it.absolutePath }.join(File.pathSeparator))
        println("Classpath written to build/ktorm.classpath")
    }
}
